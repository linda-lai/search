hello world


var users = [{id: 1, ...}, {id: 2, ...}]



users.find(user => user.id == 1)

O(n) in the worst case we will go through every element once




------------------------

var users_by_id = new Map({
  1: {name: "Logan", ...},
  2: {name: "Linda", ...}
})

users.get(1)

O(1)

-----------------------

"logan" -> hash("logan") -> 34878

34878 => age:33

-----------------------

{value: "Logan",
 next: {value: "Linda",
        next: null}}

--------------------

O(logn)


                 "logan"
      /          /     \       \
"Apple"        "Linda"    "Zebra"  "zzzebra"



======================

User logan = {
  name: "Logan"
}



indexOfUsers = new Map({
  1: 
})


users_by_id = {1: {}}
users_by_name
users_by_role = {"admin": [{}, {}]}


users_by_id.values() => [{}, {}]
.filter(user => user.role == "admin") => [{}, {}]


=====================

function printOrganisation(organisation) {
  val id = organisation.id;
  val tickets = tickets_by_org_id.get(id);

}

function printTicket(ticket) {
  val org = orgs_by_id.get(ticket.org_id);
}

Index things based on the attribute that you will use to retrieve it.

===

========================================

- Treat data as data
  - Schema optional
- Object modelling



=================



- Start with Modules that reference nothing outside of themselves
- When modules reference each other it should go only one way
  - Code at the same level of abstraction should live together, code at different levels should live apart




  Coordinator
  - Sub coordinator
  - Sub coordinator
    - Concretely doing something


Make breakfast
  - Make table
    - Pull out table cloth
  - set up stove  -> clean kitchen
   - Turn on stove
    - Pull frying pan from cupboard
  - make pancakes(cleanKitchen)
    - add pancake mix
 - make bacon(cleanKitchen)
   - add bacon





Make breakfast

    - Pull out table cloth
    - place down placemats
    - lay out cutlery
    - make pancakes
      - Turn on stove
      - Pull frying pan from cupboard



// it reads in data from JSON files
// there is a UI from the command line
// it takes search inputs from the UI
// there is a search algorithm that searches the data
// to display the results (if found) and related entities

// -> Reading from disk
const data = loadData();
const searchInputs = promptUser();
const results = searchEntities(inputs, data);
printResults(results);
 // -> Writing to screen


 1 + 1 = 2
 plus(1, 1) // => 2

 console.log("hello world")
 // => Printing to screeen


 // Procedural solution. Includes side effects.
 var name;

 function getUserName() {
   name = prompt("What is your name?");
 }

 function printName() {
   console.log("Hello " + name);
 }

 run() {
   getUserName();
   printName();
 }

 // Pragmatic functional
function getUserName() {
  return prompt("What is your name?")
}

function greet(name) {
  return "Hello " + name;
}

function printGreeting(greeting) {
  console.log(greeting)
}


function printName(name) {
  console.log("Your name is" + name)
}

function run {
  const name = getUserName();
  const output = greet(name);
  printName(name);
  printGreeting(output);
}

testGreet() {
  assertEqual("Hello Linda", greet("Linda"))
}

// Solve problems using the least powerful tools

// Data > Pure functions > Impure functions

switch(name) {
  case: Logan
  console.log("Hello")
  case: Peter
  console.log("Get out of here")
}


user_response = {
  "Logan": "Hello",
  "Peter": "Get out of here"
}

assert_equal(user_response, user_response)

function run() {
  console.log(user_response[name])
}


Side effects: Are anything other than computations on arguments that are returned by the function.
eg: reading/ writing global variables
reading/writing disk/network/screen

pure functions: eg math stuff

1. Write the simplest/quickest/dirtiest version of the solution to map out the key components

2. Consider the different levels of abstractions

3. What are the business logic details vs. implementation details?
  - Business logic: high level representations/interfaces that represent the main entities specific to that program
  - Implementation details: language specific implementations and/or implementation details that define relationships between entities

4. Think about which functions could be pure and where side effects occur
  - Ideally side effects occur on the edges of your program

=====================



// ----------------------------------

Prototypical OO language
Classical OO language

var logan = {
  name: "Logan",
  age: 33,
  greet: function() {
    return "Hello, I am " + this.name
  }
}

var evilLogan = {
  greet: function() {
    return "I am " + this.name + " prepare to die"
  }
}

evilLogan.prototype = logan

class Person
  Person(name, age)

  String name;
  Int age;

  function greet() {
    return "Hello I am" + name
  }

  class EvilPerson < Person
    def greet()
      "I am " + this.name + " prepare to die"
    end
  end

  logan = new EvilPerson("Logan", 33)




  --------------------------------

  const francisca = {
    "_id": 1,
    "url": "http://initech.zendesk.com/api/v2/users/1.json",
    "external_id": "74341f74-9c79-49d5-9611-87ef9b6eb75f",
    "name": "Francisca Rasmussen",
    "alias": "Miss Coffey",
    "created_at": "2016-04-15T05:19:46 -10:00",
    "active": true,
    "verified": true,
    "shared": false,
    "locale": "en-AU",
    "timezone": "Sri Lanka",
    "last_login_at": "2013-08-04T01:03:27 -10:00",
    "email": "coffeyrasmussen@flotonic.com",
    "phone": "8335-422-718",
    "signature": "Don't Worry Be Happy!",
    "organization_id": 119,
    "tags": [
      "Springville",
      "Sutton",
      "Hartsville/Hartley",
      "Diaperville"
    ],
    "suspended": true,
    "role": "admin",
    "print": function() {
      printRecord("user", this)

      const [organization] = search(
        "organizations",
        "_id",
        entity.organization_id,
        data
      );
      printRecord("organization", organization);

      const tickets = search("tickets", "assignee_id", entity._id, data);
      printRecords("ticket", tickets);
    }
  }

const koffee = {
    "_id": 105,
    "url": "http://initech.zendesk.com/api/v2/organizations/105.json",
    "external_id": "52f12203-6112-4fb9-aadc-70a6c816d605",
    "name": "Koffee",
    "domain_names": [
      "farmage.com",
      "extrawear.com",
      "bulljuice.com",
      "enaut.com"
    ],
    "created_at": "2016-06-06T02:50:27 -10:00",
    "details": "MegaCorp",
    "shared_tickets": false,
    "tags": ["Jordan", "Roy", "Mckinney", "Frost"],
    "print": function() {
      printRecord("user", this)

      const tickets = search("tickets", "organization_id", entity._id, data);
      printRecords("ticket", tickets);

      const users = search("users", "organization_id", entity._id, data);
      printRecords("user", users);
    }
  }


results = [koffee, francisca]

interface Printable {
  Null print()
}

class Person implements Printable
  def print
  end
end

class Organization implement Printable
  def print
  end
end

results.forEach((result) => {
  result.print()
})